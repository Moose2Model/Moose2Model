ifdef::env-github[]
:imagesdir: https://github.com/Moose2Model/Moose2Model/blob/master/Documentation/images/
endif::[]

:toc:
:toc-placement!:
toc::[]

This documentation follows the arc42 template for architecture documentation (https://arc42.org/).

1 Introduction and Goals
========================

1.1 Requirements Overview
-------------------------
- Provide diagrams for developers that can be easily kept correct
- Reduces the cognitive load of developers who work in complex software systems
- Supports only diagram that show the dependencies between components of a software
- Supports dependencies between entities of code that are more detailed then a class (method, attribute, ...)
- Works in the moment best with models that are extracted by the SAP2Moose project
- Shall support all models that are compatible with Moose (http://moosetechnology.org/)

1.2 Quality Goals
-----------------
- Shows all dependencies between elements in a diagram
- Shows all elements that should be in a diagram

1.3 Stake Holders
-----------------

.Stake Holders
|===
| Role/Name |Expectations

|Developer
|Build diagrams where the customiziation is not lost when they are regenerated with new informations. Build diagrams that are sufficiently detailed to support the development.

|Software Architect
|Have a tool to compare the planned architecture with the realized architecture
|===

2 Architecture Constraints
==========================
- Easy to install

3 System Scope and Context
==========================
Components of SAP2Moose. Contains also components to maintain, test and documentate (including images used to documentate).

image::Moose2Model Components.png[Moose2Model Components]

.Explanation
|===
|Component |Explanation

|Stored parameters of SAP2Moose report
|It is currently not possible to store the information what elements are to be extracted in Moose2Model and report it to the extractor. In case of SAP2Moose a SAP standard feature is used. Variants for reports are stored in the system that select the corrects packages together with other needed settings.

|Other applications
|Currently Moose2Model is mostly used for SAP and Smalltalk. As different extractors provide different FAMIX models, there will be problems when a new extractor is used. Moose2Model may work with some elements. But other elements may require an adaption in Moose2Model or in the extractor.

|Smalltalk
|Moose2Model is able to analyze Smalltalk models that are created with the build in Moose extractor. Due to changes Smalltalk systems can currently be analyzed only with older Moose2Model releases (The internal class structure changed for Smalltalk). A general problem in Smalltalk is, that it is not easy to see which class will implement a message. Therefore diagrams for Smalltalk show often usages of messages simply because they have a similar name.

|Github
|This contains sub components to explain better how texts and images of the documentation are maintained

|png file
|The information how the png file is build is part of the image file. This is an option when it is exported from draw.io. Open the file with draw.io to be able to edit it and include a copy of the diagram when you export it.

|===

4 Solution Strategy
===================

.Solution Strategy
|===
|Challenge |Solution

|Simplify effort to implement a model and infrastructure to work with models of code
|Use the Moose framework as a basis

|Make it possible to build diagrams that work like floor plans or circuit diagrams and can be easily kept actual.
|Use Roassal to adapt diagrams with stored informations about positions and comments of elements. Store diagram informations on file.

|===
